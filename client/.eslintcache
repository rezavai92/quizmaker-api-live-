[{"/home/reza/QuizAPI/client/src/index.js":"1","/home/reza/QuizAPI/client/src/App.js":"2","/home/reza/QuizAPI/client/src/reportWebVitals.js":"3","/home/reza/QuizAPI/client/src/contexts/quizContext.js":"4","/home/reza/QuizAPI/client/src/component/Navigation/Header.js":"5","/home/reza/QuizAPI/client/src/component/Questions/questions.js":"6","/home/reza/QuizAPI/client/src/component/LogIn/login.js":"7","/home/reza/QuizAPI/client/src/component/Index/index.js":"8","/home/reza/QuizAPI/client/src/component/QuizMaker/quizmaker.js":"9","/home/reza/QuizAPI/client/src/component/QuizFeed/quizfeed.js":"10","/home/reza/QuizAPI/client/src/component/SignUp/signup.js":"11","/home/reza/QuizAPI/client/src/component/LogIn/error.js":"12","/home/reza/QuizAPI/client/src/component/QuizMaker/testquestion.js":"13","/home/reza/QuizAPI/client/src/component/Question/question.js":"14","/home/reza/QuizAPI/client/src/component/QuizCard/quizcard.js":"15","/home/reza/QuizAPI/client/src/component/Option/option.js":"16"},{"size":500,"mtime":1606648173276,"results":"17","hashOfConfig":"18"},{"size":1380,"mtime":1612195847677,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":6539,"mtime":1612077059382,"results":"21","hashOfConfig":"18"},{"size":1693,"mtime":1612274590285,"results":"22","hashOfConfig":"18"},{"size":4614,"mtime":1612177808024,"results":"23","hashOfConfig":"18"},{"size":3148,"mtime":1612274553065,"results":"24","hashOfConfig":"18"},{"size":447,"mtime":1612274531785,"results":"25","hashOfConfig":"18"},{"size":11003,"mtime":1612274653405,"results":"26","hashOfConfig":"18"},{"size":1575,"mtime":1612274621273,"results":"27","hashOfConfig":"18"},{"size":3146,"mtime":1612092796531,"results":"28","hashOfConfig":"18"},{"size":448,"mtime":1612196092071,"results":"29","hashOfConfig":"18"},{"size":1029,"mtime":1612274674761,"results":"30","hashOfConfig":"18"},{"size":1487,"mtime":1612151909184,"results":"31","hashOfConfig":"18"},{"size":637,"mtime":1612264394315,"results":"32","hashOfConfig":"18"},{"size":2015,"mtime":1612154291051,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"f2pv6n",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},"/home/reza/QuizAPI/client/src/index.js",[],["77","78"],"/home/reza/QuizAPI/client/src/App.js",["79"],"import React ,  {Component} from 'react';\r\n//import Router from './Components/Router/Router'\r\nimport Navigation from './component/Navigation/Header'\r\n//import Homepage from './component/Homepage/Homepage'\r\nimport ContextProvider from './contexts/quizContext'\r\nimport Questions from './component/Questions/questions'\r\nimport QuizMaker from './component/QuizMaker/quizmaker'\r\nimport Error from './component/LogIn/error'\r\nimport {BrowserRouter,Route} from 'react-router-dom'\r\nimport Login from './component/LogIn/login'\r\nimport Index from './component/Index/index'\r\nimport QuizFeed from './component/QuizFeed/quizfeed'\r\nimport SignUp from './component/SignUp/signup'\r\n//import './App.css';\r\n\r\nconst App=()=>  {\r\n\r\n\r\n\r\n\r\n  \r\n\r\nreturn ( \r\n\r\n\r\n<ContextProvider>\r\n<BrowserRouter>   \r\n<Navigation />\r\n       \r\n        <Route path=\"/takequiz/:id\" exact component ={QuizMaker} />\r\n        <Route path=\"/signup\" exact component={SignUp} />\r\n        <Route path=\"/login/error\" exact component={Error} />     \r\n        <Route path=\"/login\" exact component={Login} />                  \r\n        <Route path =\"/answerquiz\" exact component = {QuizFeed} />\r\n        <Route path='/makequiz' exact component={Questions}></Route>\r\n        <Route path=\"/\" exact  component={Index} /> \r\n       \r\n  </BrowserRouter>\r\n</ContextProvider>\r\n       \r\n           \r\n     \r\n\r\n  )\r\n  \r\n}\r\n\r\nexport default App;\r\n","/home/reza/QuizAPI/client/src/reportWebVitals.js",[],"/home/reza/QuizAPI/client/src/contexts/quizContext.js",["80"],"import React , {createContext,useState,useEffect} from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport axios from 'axios'\r\nexport const quizContext = createContext();\r\nconst ContextProvider = (props)=>{\r\n\r\n\r\n   \r\n    const [quizTitle,setQuizTitle] = useState(\"\")\r\n    const [questions,setQuestions] = useState([])\r\n    const [duration,setDuration] = useState(\"\")\r\n\r\n\r\n\r\n    const [token,setToken] =useState(\"\");\r\nconst[loggedInUserId,setLoggedInUserId]=useState(null)\r\nconst[loginToken,setLoginToken] = useState(\"\");\r\n//console.log(\"from context\")\r\n\r\n\r\nuseEffect(()=>{\r\n\r\nsetLoginToken(Cookies.get(\"token\"))\r\nsetLoggedInUserId(Cookies.get(\"user\"))\r\n},[])\r\nconst registerUser = (token)=>{\r\n\r\n    setToken(token);\r\n\r\n}\r\n\r\nconst confirmLogin = (token,loggedInUserId)=>{\r\n\r\n    setLoginToken(token);\r\n    setLoggedInUserId(loggedInUserId)\r\n\r\n}\r\nconst confirmLogout = ()=>{\r\n    \r\n    async function fetch (){\r\n\r\n        try{\r\n            await axios.get('/auth/logout',\r\n           {headers:{\r\n               xAuthToken :loginToken\r\n           }} ,\r\n            )\r\n            setLoginToken(Cookies.get(\"token\"))\r\n            setLoggedInUserId(Cookies.get(\"user\"))\r\n            setQuizTitle(\"\")\r\n            setQuestions([])\r\n            setDuration([])\r\n            \r\n        }\r\n        catch(err){\r\n\r\n\r\n        }\r\n    }\r\n    fetch()\r\n\r\n    }\r\n    //quiz title change\r\n    const quizDurationChange = (e)=>{\r\n\r\n        setDuration(e.target.value)\r\n    }\r\n    const quizTitleChange = (e)=>{\r\n\r\n        setQuizTitle(e.target.value);\r\n        \r\n    }\r\n\r\n    //correct option handler\r\n\r\n    const correctOptionChangeHandler =(questionId,optionId)=>{\r\n\r\n        let question ={};\r\n\r\n        questions.forEach((q)=>{if(q.id===questionId){\r\n\r\n            question = q;\r\n        }})\r\n\r\n        question.options.forEach((o)=>{\r\n\r\n            if(o.id===optionId){\r\n\r\n\r\n                o.isCorrect=!o.isCorrect;\r\n            }\r\n        })\r\n\r\n        const indexes = questions.map((q)=>{return q.id});\r\n\r\n        const replacableIndex= indexes.indexOf(questionId);\r\n  \r\n        const allQuestions =[...questions];\r\n  \r\n        allQuestions.splice(replacableIndex,1,question);\r\n  \r\n        setQuestions(allQuestions)\r\n  \r\n\r\n\r\n    }\r\n\r\n    // delete option handler\r\n    const deleteOptionHandler = (questionId,optionId)=>{\r\n\r\n        let question ={};\r\n        questions.forEach((q)=>{if(q.id===questionId){\r\n\r\n            question = q;\r\n        }})\r\n\r\n        const optionIds = question.options.map((o)=>{return o.id});\r\n\r\n        const removableIndex= optionIds.indexOf(optionId);\r\n\r\n        const oldOptions =[...question.options];\r\n        oldOptions.splice(removableIndex,1);\r\n\r\n        question.options = oldOptions;\r\n\r\n        \r\n        const indexes = questions.map((q)=>{return q.id});\r\n\r\n      const replacableIndex= indexes.indexOf(questionId);\r\n\r\n      const allQuestions =[...questions];\r\n\r\n      allQuestions.splice(replacableIndex,1,question);\r\n\r\n      setQuestions(allQuestions)\r\n\r\n\r\n    }\r\n\r\n\r\n    // delete question handler \r\n    const deleteQuestionHandler = (questionId)=>{\r\n\r\n\r\n        const oldQuestions = [...questions];\r\n        const indexes = questions.map((q)=>{return q.id});\r\n\r\n        const replacableIndex= indexes.indexOf(questionId);\r\n\r\n        oldQuestions.splice(replacableIndex,1);\r\n        if(oldQuestions.length===0){\r\n            setQuizTitle(\"\");\r\n            setDuration(null);\r\n        }\r\n        setQuestions(oldQuestions);\r\n        \r\n        \r\n\r\n    }\r\n    //question text change\r\n    const questionTextChange=(e,id)=>{\r\n\r\n        const oldQuestion = [...questions]\r\n        for (let q in oldQuestion){\r\n            if(oldQuestion[q].id===id ){\r\n                oldQuestion[q].title = e.target.value;\r\n                break;\r\n            }\r\n        }\r\n        setQuestions(oldQuestion);\r\n    }\r\n\r\n\r\n    //optiontextchange\r\n    const optionTextChangeHandler =(e,questionId,optionId)=>{\r\n\r\n        let question ={};\r\n\r\n        questions.forEach((q)=>{\r\n            if(q.id===questionId){\r\n\r\n                 question = q;\r\n            }\r\n        })\r\n\r\n        question.options.forEach((o)=>{\r\n\r\n            if(o.id===optionId){\r\n\r\n                o.title = e.target.value;\r\n            }\r\n        })\r\n\r\n        \r\n     const indexes = questions.map((q)=>{return q.id});\r\n\r\n      const replacableIndex= indexes.indexOf(questionId);\r\n\r\n      const allQuestions =[...questions];\r\n\r\n      allQuestions.splice(replacableIndex,1,question);\r\n\r\n      setQuestions(allQuestions)\r\n\r\n        \r\n\r\n\r\n    }\r\n    //create option\r\n    const createOption=(questionId)=>{\r\n\r\n       const option ={\r\n        id : generateKey(Math.random()),\r\n        title : \"\",\r\n        isCorrect : false\r\n       }\r\n\r\n       let question ={};\r\n\r\n       questions.forEach((q)=>{\r\n\r\n        if(q.id===questionId){\r\n            question =q;\r\n        }\r\n       })\r\n\r\n       \r\n\r\n       const options = [...question.options]\r\n\r\n       options.push(option);\r\n      // const newOptions =[...options,option];\r\n       question.options=options;\r\n\r\n       const indexes = questions.map((q)=>{return q.id});\r\n\r\n      const replacableIndex= indexes.indexOf(questionId);\r\n\r\n      const allQuestions =[...questions];\r\n\r\n      allQuestions.splice(replacableIndex,1,question);\r\n\r\n      setQuestions(allQuestions)\r\n\r\n\r\n    }\r\n    //create question\r\n    const createQuestion= ()=>{\r\n\r\n\r\n        const question ={\r\n            id : generateKey(Math.random()),\r\n            title :\"\",\r\n            options:[]\r\n        }\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n        const contents = [...questions,question];\r\n\r\n        setQuestions(contents);\r\n\r\n    }\r\n\r\n  //  const [Questions,setQuestions] = useState();\r\n\r\n  const  generateKey = (pre) => {\r\n        return `${ pre }_${ new Date().getTime() }`\r\n  }\r\n\r\n\r\n    return(<div>\r\n\r\n        <quizContext.Provider\r\n         value={ {generateKey,createQuestion,questions,\r\n            correctOptionChangeHandler,\r\n            quizTitle,\r\n            quizDurationChange,\r\n            quizTitleChange,\r\n            optionTextChangeHandler,\r\n            deleteQuestionHandler,\r\n            deleteOptionHandler,\r\n            setQuizTitle,\r\n            setQuestions,\r\n            setDuration,\r\n            setLoginToken,setLoggedInUserId,\r\n             loggedInUserId, \r\n             quizDuration : duration,\r\n            loginToken,registerUser,\r\n            confirmLogin,confirmLogout,\r\n         questionTextChange,createOption }} >\r\n            {props.children}\r\n        </quizContext.Provider>\r\n    </div>)\r\n}\r\n\r\nexport default ContextProvider\r\n","/home/reza/QuizAPI/client/src/component/Navigation/Header.js",["81","82"],"import React,{useContext,useState,useEffect} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n//import axios from 'axios'\r\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n//import {faPaperclip} from '@fortawesome/free-solid-svg-icons'\r\nimport {Navbar,Nav} from 'react-bootstrap'\r\nimport {quizContext} from '../../contexts/quizContext'\r\nconst Navigation = ()=>{\r\n\r\n // console.log(\"from navigation\")\r\n\r\n  const {loginToken,loggedInUserId,confirmLogout} = useContext(quizContext)\r\n  \r\nreturn (<div  >\r\n    <Navbar bg=\"dark\" variant=\"dark\"  expand=\"lg\">\r\n  <Navbar.Brand >Quizophile</Navbar.Brand>\r\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n  <Navbar.Collapse id=\"basic-navbar-nav\">\r\n    <Nav className=\"mr-auto\">\r\n      <Nav.Link ><Link to=\"/\" style={{color:\"white\"}} >Home</Link></Nav.Link>\r\n      {loginToken?<Nav.Link ><Link to=\"/makequiz\" style={{color:\"white\"}}  >\r\n      Make Quiz\r\n      </Link></Nav.Link>:null }\r\n      <Nav.Link ><Link to=\"/answerquiz\" style={{color:\"white\"}}  >\r\n        Answer Quiz\r\n      </Link></Nav.Link>\r\n     \r\n    </Nav>\r\n     \r\n     {!loginToken?\r\n     <Nav>\r\n      <Nav.Link ><Link to=\"/login\" style={{color:\"white\"}}  >Log In</Link></Nav.Link> \r\n      <Nav.Link  ><Link to=\"/signup\" style={{color:\"white\"}}  >Sign Up</Link></Nav.Link>\r\n      </Nav> \r\n      :\r\n      <Nav>\r\n        <Nav.Link><Link to={`/user/${loggedInUserId}`}\r\n         style={{color:\"white\"}}   >User</Link></Nav.Link>\r\n      <Nav.Link ><Link to=\"/login\" style={{color:\"white\"}}\r\n      onClick={()=>{confirmLogout()}}\r\n       >Log Out </Link></Nav.Link>\r\n      </Nav>\r\n    }\r\n  </Navbar.Collapse>\r\n</Navbar>\r\n    </div>)\r\n\r\n}\r\n\r\nexport default Navigation","/home/reza/QuizAPI/client/src/component/Questions/questions.js",["83","84","85"],"import React ,{useState,useEffect,useContext} from 'react'\r\nimport {quizContext} from '../../contexts/quizContext'\r\nimport {Button,Form,Modal} from 'react-bootstrap'\r\nimport Question from '../Question/question'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {Helmet} from 'react-helmet'\r\nimport axios from 'axios'\r\nimport './questions.css'\r\nimport { faBatteryThreeQuarters } from '@fortawesome/free-solid-svg-icons'\r\nconst Questions= ()=>{\r\n\r\n\r\n   const{quizDuration,setQuizTitle,setQuestions,setDuration ,quizTitle,quizDurationChange,questionTextChange,quizTitleChange ,questions,createQuestion,loginToken } = useContext(quizContext);\r\n   const [willShowModal,setWillShowModal] = useState(false)\r\n   \r\n\r\n   const closeModal = ()=>{\r\n\r\n    setWillShowModal(false);\r\n\r\n   }\r\n\r\n\r\n   \r\n   const quizSubmitHandler = (e)=>{\r\n\r\n    e.preventDefault();\r\n    // const postData = async ()=>{\r\n\r\n    //     try{\r\n    //         console.log(\"questions\",questions)\r\n    //       const res=  await axios.post('/quiz',{\r\n\r\n           \r\n    //         title : quizTitle,\r\n    //         questions : questions,\r\n    //         duration: quizDuration\r\n           \r\n\r\n    //       },{headers:{\r\n\r\n    //         xAuthToken:loginToken\r\n    //       }} );\r\n    //       console.log(\"from questions.js,created quiz \",res);\r\n    //       setQuizTitle(\"\")\r\n    //       setQuestions([])\r\n    //       setDuration(\"\")\r\n         \r\n    //     }\r\n    //     catch(error){\r\n\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    // if(loginToken){\r\n    //     postData()\r\n    // }\r\n\r\n    setWillShowModal(true)\r\n\r\n   }\r\n\r\n   const saveQuizHandler = ()=>{\r\n      const postData = async ()=>{\r\n\r\n        try{\r\n     //       console.log(\"questions\",questions)\r\n          const res=  await axios.post('/quiz',{\r\n\r\n           \r\n            title : quizTitle,\r\n            questions : questions,\r\n            duration: quizDuration\r\n           \r\n\r\n          },{headers:{\r\n\r\n            xAuthToken:loginToken\r\n          }} );\r\n  //        console.log(\"from questions.js,created quiz \",res);\r\n          setQuizTitle(\"\")\r\n          setQuestions([])\r\n          setDuration(null)\r\n          setWillShowModal(false)\r\n         \r\n        }\r\n        catch(error){\r\n\r\n          //  console.log(error)\r\n        }\r\n    }\r\n\r\n    if(loginToken){\r\n        postData()\r\n    }\r\n\r\n   }\r\n\r\n\r\n   return(<div style={{textAlign:\"center\" , marginTop:\"2%\",  }} \r\n   className=\"container \">\r\n\r\n\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>Quizophile</title>\r\n                \r\n            </Helmet>\r\n\r\n\r\n<div style={{\r\n    backgroundColor:\"\"\r\n}}  className=\"questions\" >\r\n\r\n\r\n<div className=\"questionModal\" >\r\n<Modal show={willShowModal} \r\nonHide={closeModal} \r\nbackdrop=\"static\"\r\n keyboard={false}\r\nanimation={false}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Save Quiz</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Are you sure ?</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={closeModal}>\r\n            Back\r\n          </Button>\r\n          <Button variant=\"primary\"  onClick={saveQuizHandler}  >\r\n            Save\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n</div>\r\n\r\n    {loginToken?\r\n    <div>\r\n\r\n<Button onClick={createQuestion}  variant=\"secondary\" style={{width:\"100%\" , marginBottom:\"2%\"}} >{questions.length>0? \"Add Question\" : \"Start\"} </Button>\r\n\r\n      <Form onSubmit={(e)=>{quizSubmitHandler(e)  } } >\r\n\r\n\r\n      {questions.length> 0? \r\n\r\n<div>\r\n  \r\n    <Form.Group>\r\n    \r\n    <Form.Control type=\"text\" size=\"lg\" \r\n    style={{width:\"100%\"}}\r\n    required={true}\r\n    value={quizTitle} onChange={(e)=>{quizTitleChange(e) }}\r\n    placeholder=\"Quiz Title\" />\r\n    \r\n    </Form.Group>\r\n    <Form.Group>\r\n    \r\n    <Form.Control type=\"number\" \r\n    style={{width:\"100%\"}}\r\n    min={5}\r\n    required={true}\r\n    size=\"sm\"\r\n    value={quizDuration}\r\n    onChange={quizDurationChange}\r\n    placeholder=\"duration\" />\r\n    \r\n    </Form.Group>\r\n</div>\r\n\r\n\r\n    \r\n:null}\r\n\r\n{\r\nquestions.map((q,index)=>{\r\nreturn(<div  key={q.id} >\r\n        <Question\r\n        \r\n        questionNo={index+1}\r\n        textChange={questionTextChange}\r\n        title ={q.title}\r\n        options ={q.options}\r\n        id={q.id}\r\n        ></Question>\r\n\r\n    </div>)\r\n})\r\n\r\n}\r\n{questions.length>0?\r\n\r\n<Button variant=\"secondary\" \r\ntype=\"submit\"\r\nstyle={{width:\"100%\" , marginBottom:\"2%\"}} >Submit</Button> :null\r\n\r\n}\r\n      </Form>\r\n\r\n    </div>\r\n    \r\n    :<Redirect to=\"/\"  /> }\r\n\r\n\r\n</div>\r\n\r\n\r\n   </div>)\r\n   \r\n\r\n}\r\n\r\nexport default Questions","/home/reza/QuizAPI/client/src/component/LogIn/login.js",[],"/home/reza/QuizAPI/client/src/component/Index/index.js",[],"/home/reza/QuizAPI/client/src/component/QuizMaker/quizmaker.js",["86","87","88","89","90","91"],"import React ,{useState,useEffect} from 'react'\r\n//import {quizContext} from '../../contexts/quizContext'\r\nimport {Modal,Button,Spinner} from 'react-bootstrap'\r\nimport axios from 'axios'\r\nimport './quizMaker.css'\r\nimport { Redirect } from 'react-router-dom'\r\nimport {Helmet} from 'react-helmet'\r\nimport Timer from 'react-compound-timer'\r\nimport { CircularProgressbar ,buildStyles} from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nimport TestQuestion from './testquestion'\r\nconst QuizMaker = ()=>{\r\n\r\n   \r\n    const [quiz,setQuiz] = useState({title:\"\",duration:\"\",questions:[],author:\"\" });\r\n    const path =window.location.pathname;\r\n    const [startAgain,setStartAgain] = useState(false)\r\n    const [willShowResultModal, setWillShowResultModal] = useState(false);\r\n\r\n  const handleShowResultClose = () => {\r\n    \r\n    setWillShowResultModal(false);\r\n    closeModal();\r\n   } ;\r\n  const handleShowResultShow = () => setWillShowResultModal(true);\r\n\r\n    const [willShowModal,setWillShowModal] = useState(true)\r\n    const [willStartTest,setWillStartTest] = useState(false)\r\n    const [willTakeBack,setWillTakeBack] =useState(false);\r\n    const[quizSubmissionSpins,setQuizSubmissionSpins]= useState(false);\r\n    const [answerSheet,setAnswerSheet] = useState([]);\r\n    const [obtainedMarks,setObtainedMarks] = useState(0);\r\n    const[totalMarks,setTotalMarks] = useState(0);\r\n    const[willShowTimeupModal ,setWillShowTimeupModal] = useState(false)\r\n    const pathsep= path.split(\"/\");\r\n\r\n    //console.log(pathsep)\r\n   const id = pathsep[2] ;\r\n   console.log(\"quiz id is \",path)\r\n    useEffect(()=>{\r\n\r\n        const getQuiz = async ()=>{\r\n\r\n            try{\r\n\r\n                const quizContent = await axios.get(`/quiz/${id}`);\r\n\r\n                setQuiz(quizContent.data)\r\n              //  console.log(\"quiz content \",quizContent);\r\n            }\r\n\r\n            catch(error){\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        getQuiz();\r\n    },[])\r\n\r\n    const takeBack = ()=>{\r\n\r\n        setWillTakeBack(true)\r\n    }\r\n\r\n\r\n    //get trail color,textcolor for score\r\n\r\n    const getScoreFeatures=(score,total)=>{\r\n\r\n        const ratio = (score/total);\r\n        let feedback=\"\";\r\n        let trailColor =\"\";\r\n        if( ratio===1 ){\r\n\r\n          feedback=\"Master!\";\r\n          trailColor=\"#ff3dd2\"\r\n        }\r\n        else if ( ratio>=.8){\r\n          feedback =\"Excellent!\";\r\n          trailColor =\"#3da5ff\"\r\n\r\n        }\r\n        \r\n      else  if(ratio>0.65){\r\n          feedback=\"Well Done!\"\r\n          trailColor=\"#3da5ff\"\r\n        }\r\n        else  if(ratio>=0.5){\r\n          feedback=\"Good!\"\r\n          trailColor=\"#3da5ff\"\r\n        }\r\n        \r\n        else {\r\n          feedback=\"Try Again!\"\r\n          trailColor=\"red\"\r\n        }\r\n\r\n        return{feedback,trailColor}\r\n    }\r\n    \r\n    const startTestHandler = ()=>{\r\n        setWillShowModal(false)\r\n        setWillStartTest(true)\r\n    }\r\n   const closeTimeupModal= ()=>{\r\n        setWillShowTimeupModal(false);\r\n        takeBack();\r\n\r\n    }\r\n    const closeModal = ()=>{\r\n        setWillShowModal(false)\r\n        takeBack();\r\n    }\r\n\r\n    const quizSubmitHandler=()=>{\r\n\r\n      setWillShowResultModal(true)\r\n      setQuizSubmissionSpins(true)\r\n      const postData =async ()=>{\r\n\r\n\r\n        try{\r\n          const res= await axios.post(`/quiz/evaluation/${id}`,{answerSheet})\r\n\r\n          setQuizSubmissionSpins(false)\r\n        \r\n         // console.log(res.data);\r\n          setObtainedMarks(res.data.marksObtained);\r\n          setTotalMarks(res.data.total);\r\n\r\n          const recordResponse = await axios.post('/record',{\r\n\r\n            obtainedMarks:res.data.marksObtained,\r\n            totalMarks :res.data.total,\r\n            quiz : id\r\n          })\r\n          console.log(recordResponse.data);\r\n          setAnswerSheet([]);\r\n          setWillStartTest(false);\r\n\r\n          \r\n        }\r\n        catch(error){\r\n          setQuizSubmissionSpins(false);\r\n         \r\n          throw error;\r\n        }\r\n\r\n      }\r\n     setTimeout(()=>{\r\n      postData();\r\n\r\n     },1000)\r\n    }\r\n  //  console.log(\"answers sheets\",answerSheet);\r\n\r\n\r\n\r\n    return(<div className=\"container quizmaker \" >\r\n\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <meta property=\"og:title\" content={quiz.title} data-rh=\"true\" />\r\n                <meta property=\"og:description\" content={quiz.title} data-rh=\"true\" />\r\n                <meta property=\"og:image\" \r\n                content='https://i.imgur.com/mpcNFUA.png'\r\n                data-rh=\"true\" />\r\n\r\n                \r\n                \r\n            </Helmet>\r\n\r\n        {willTakeBack?<Redirect to=\"/answerquiz\" /> : null}\r\n\r\n      {willShowModal?\r\n      \r\n    <div>\r\n        <Modal show={willShowModal} \r\n            onHide={closeModal} \r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n            animation={false}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Reminder!</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Are you ready to take this test? </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={closeModal}>\r\n            Go Back\r\n          </Button>\r\n          <Button variant=\"primary\" onClick ={startTestHandler} >\r\n            Start\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div> :\r\n    null\r\n    }\r\n\r\n{willShowTimeupModal?\r\n      \r\n      <div>\r\n          <Modal show={willShowTimeupModal} \r\n              onHide={closeTimeupModal} \r\n              backdrop=\"static\"\r\n              keyboard={false}\r\n              animation={false}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Finshed!</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>Your Thank you for participating </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={closeTimeupModal}>\r\n              Close\r\n            </Button>\r\n            \r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div> :\r\n      null\r\n      }\r\n  \r\n\r\n    {willStartTest?\r\n        <div>\r\n            <div className =\"quizHeader\">\r\n                <h2> <span>Title : </span> {quiz.title}</h2>\r\n              \r\n                <Timer\r\n                initialTime={quiz.duration*60*1000}\r\n                direction=\"backward\"\r\n                checkpoints={[\r\n                    {\r\n                        time: 0,\r\n                        callback: () =>{\r\n                            \r\n                            \r\n                            setQuiz({});\r\n                            setWillShowTimeupModal(true);\r\n                            setWillStartTest(false);\r\n                        \r\n                        },\r\n                            \r\n\r\n\r\n\r\n                    }\r\n                   \r\n                ]}\r\n                 >\r\n                {() => (\r\n                    <h4 style={{color:\"red\"}} >\r\n                       <span style={{fontWeight:\"normal\"}} >   Time Remaining : {\" \"}</span>\r\n                        <Timer.Hours /> : \r\n                        <Timer.Minutes /> : \r\n                        <Timer.Seconds />\r\n                        \r\n                    </h4>\r\n                    \r\n                )}\r\n              </Timer>\r\n              \r\n                <p style={{color:\"#4287f5\"}} > <em style={{color:\"#24354f\"}} >Prepared by : </em> {quiz.author.name } </p>\r\n            </div>\r\n           {quiz.questions?\r\n             <div className=\"questionFlex\" >\r\n             {quiz.questions.map((question,index)=>{\r\n                 return(<div key={question._id} > \r\n                             <TestQuestion questionNo={index+1} \r\n                                 options ={question.options}\r\n                                 title ={question.title}\r\n                                 questionId={question._id}\r\n                                 selectedOptionHandler={(selectedOptionId)=>{\r\n                                   const queId =question._id;\r\n                                  const answers= [...answerSheet];\r\n                                const foundQuestion=  answers.find((a)=>{\r\n                                    return a.question_id===queId;\r\n                                  })\r\n                                  if(foundQuestion!=undefined){\r\n                                   const queIndex= answers.findIndex((a)=>{\r\n                                      return a.question_id===queId;\r\n                                    });\r\n                                    if(queIndex>=0){\r\n                                      answers[queIndex]={question_id :queId, selectedOption:selectedOptionId}\r\n                                      \r\n                                    }\r\n                                  }\r\n                                  else{\r\n                                    answers.push({question_id :queId, selectedOption:selectedOptionId})\r\n                                  }\r\n                                  setAnswerSheet(answers);\r\n                                  \r\n                                 } }\r\n                             />\r\n                         </div>\r\n                     )\r\n             }) } \r\n\r\n             <div style={{textAlign:\"center\"}} > \r\n               <Button variant=\"success\" \r\n               onClick={()=>{\r\n\r\n              quizSubmitHandler();\r\n               }}\r\n               >Submit</Button> \r\n               </div>\r\n         </div> :null   \r\n        }\r\n        </div>   : null \r\n    }\r\n\r\n{/* Result Pop Up Modal */}\r\n\r\n{\r\n willShowResultModal?\r\n\r\n\r\n <div className=\"submit-spinner\" >\r\n  \r\n  <Modal show={willShowResultModal} onHide={handleShowResultClose} >\r\n\r\n      <Modal.Header closeButton >\r\n        {!quizSubmissionSpins? <h4 style={{marginLeft:\"40%\",color:\"#3da5ff\"}}>\r\n\r\n         { getScoreFeatures(obtainedMarks,totalMarks).feedback}\r\n        </h4> :null}\r\n      </Modal.Header>\r\n        <Modal.Body>\r\n          \r\n        {quizSubmissionSpins?         \r\n        <div style={{textAlign:\"center\" ,padding:\"10%\" }}>\r\n         <p>\r\n           Processing...\r\n         </p>\r\n        <Spinner animation=\"border\" variant=\"success\" />\r\n        </div>: <div style={{textAlign:\"center\" ,padding:\"10%\" }} >\r\n        <CircularProgressbar value={(obtainedMarks/totalMarks)*100} \r\n        \r\n        text={obtainedMarks+\"/\"+totalMarks} />;\r\n        </div> \r\n        \r\n        \r\n        }\r\n        </Modal.Body>\r\n        {!quizSubmissionSpins ?\r\n        <Modal.Footer>\r\n            <Button variant=\"warning\" onClick={()=>{\r\n\r\n              \r\n              setWillShowResultModal(false)\r\n              setWillStartTest(true)\r\n             \r\n              //setStartAgain(true);\r\n            }} >\r\n              Try Again\r\n            </Button>\r\n            <Button variant=\"info\" onClick={handleShowResultClose}  >\r\n              Home\r\n            </Button>\r\n        </Modal.Footer>\r\n        :null}\r\n        \r\n      </Modal>\r\n   </div>\r\n  \r\n : null\r\n}\r\n\r\n\r\n\r\n\r\n    </div>)\r\n\r\n}\r\n\r\nexport default QuizMaker","/home/reza/QuizAPI/client/src/component/QuizFeed/quizfeed.js",[],"/home/reza/QuizAPI/client/src/component/SignUp/signup.js",["92","93"],"import React,{useState,useEffect,useContext} from 'react'\r\nimport axios from 'axios'\r\nimport {Form,FormControl,Button} from 'react-bootstrap'\r\nimport {Redirect,withRouter} from 'react-router-dom'\r\nimport {quizContext} from '../../contexts/quizContext'\r\nimport \"./signup.css\"\r\nconst SignUp = (props)=>{\r\n\r\n    \r\n    const [name,setName]=useState(\"\");\r\n    const [email,setEmail] = useState(\"\");\r\n    const[willRedirect,setWillRedirect] = useState(false)\r\n    const[password,setPassword] = useState(\"\");\r\n    const {registerUser,loginToken} = useContext(quizContext);\r\n    const [loggedIn,setLoggedIn] = useState(false)\r\n // console.log(\"from sign up\",loggedIn,loginToken)  \r\n  useEffect(()=>{\r\n\r\n    if(loginToken){\r\n      setLoggedIn(true);\r\n     \r\n    }\r\n   // console.log(\"from signup useEffect\")\r\n  },[loginToken])\r\n\r\n    const nameChangeHandler =(e)=>{\r\n\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const emailChangeHandler = (e)=>{\r\n        setEmail(e.target.value)\r\n    }\r\n\r\n    const passwordChangeHandler= (e)=>{\r\n\r\n        setPassword(e.target.value)\r\n    }\r\n    const formSubmitHandler = (e)=>{\r\n\r\n        e.preventDefault();\r\n        \r\n        axios.post('/user/register',{\r\n            name,\r\n            email,\r\n            password\r\n        }).then((res)=>{\r\n          registerUser(res.data.token)\r\n        // console.log(res)\r\n         setName(\"\");\r\n         setPassword(\"\");\r\n         setEmail(\"\");\r\n         setWillRedirect(true);\r\n       // props.hisotry.push('/')\r\n        }).catch((err)=>{\r\n          \r\n         // console.log(\"hi\")\r\n         const targetString= String(err).split(\"status code\")[1];\r\n      //   console.log(\"target string\",targetString)\r\n         if(targetString.includes(\"409\")){\r\n\r\n          window.alert(\"validation error, email address already taken. Try with a different email address\")\r\n         }\r\n         else{\r\n           window.alert(\"internal server error\")\r\n         }\r\n        })\r\n        \r\n        \r\n    }\r\n\r\n    const render = ()=>{\r\n\r\n      return <Redirect to=\"login\" />\r\n    }\r\nreturn(<div className=\"signup\">\r\n\r\n\r\n{loginToken?<Redirect to=\"/\" /> : \r\n\r\n\r\n   <div> \r\n     <h1>Sign Up</h1>\r\n     \r\n\r\n     <Form action={render} onSubmit={ (e)=>{formSubmitHandler(e)}} >\r\n\r\n\r\n<Form.Group controlId=\"formBasicCheckbox\">\r\n  <Form.Control value ={name} name=\"name\" \r\n  required={true}\r\n  onChange={(e)=>{nameChangeHandler(e)} } \r\n  type=\"text\" placeholder=\"Enter Name\" />\r\n</Form.Group>\r\n\r\n\r\n<Form.Group controlId=\"formBasicEmail\">\r\n  <Form.Control value={email} name=\"email\" required={true} onChange={(e)=>{emailChangeHandler(e)}} type=\"email\" placeholder=\"Enter email\" />\r\n  <Form.Text className=\"text-muted\">\r\n    We'll never share your email with anyone else.\r\n  </Form.Text>\r\n</Form.Group>\r\n\r\n\r\n<Form.Group controlId=\"formBasicPassword\">\r\n  \r\n  <Form.Control type=\"password\" placeholder=\"Password\"\r\n  value={password} required={true} onChange={(e)=>{passwordChangeHandler(e)}}  name=\"password\"\r\n  /></Form.Group>\r\n\r\n<Button variant=\"primary\" type=\"submit\">\r\n  Submit\r\n</Button>\r\n</Form>\r\n   </div>\r\n\r\n}\r\n\r\n{willRedirect? render():null}\r\n\r\n</div>)\r\n\r\n}\r\n\r\nexport default withRouter(SignUp)","/home/reza/QuizAPI/client/src/component/LogIn/error.js",[],"/home/reza/QuizAPI/client/src/component/QuizMaker/testquestion.js",[],"/home/reza/QuizAPI/client/src/component/Question/question.js",["94","95"],"import React ,{useState,useEffect,useContext} from 'react'\r\nimport {quizContext} from '../../contexts/quizContext'\r\nimport {Button,Form} from 'react-bootstrap'\r\nimport Option from '../Option/option'\r\nimport './question.css'\r\nconst Question= (props)=>{\r\n\r\n\r\n   const{optionTextChangeHandler,createOption,deleteQuestionHandler  } = useContext(quizContext);\r\n\r\n   return(<div className=\"jumbotron question\"   >\r\n\r\n\r\n    <div className=\"question-text\" >\r\n\r\n         <h5 style={{color:\"white\"}} >\r\n            {\"#\"+props.questionNo +\".\" }\r\n          </h5>\r\n         <Form.Group>\r\n            \r\n        <Form.Control type=\"text\" size=\"lg\" \r\n        style={{width:\"100%\"}}\r\n        value={props.title} onChange={(e)=>{props.textChange(e,props.id) }}\r\n        required={true}\r\n        placeholder=\"Question\" />\r\n        \r\n        </Form.Group>\r\n    </div>\r\n\r\n  \r\n   \r\n    {props.options.map((o)=>{\r\n\r\n        return(<div key={o.id}>\r\n            \r\n            <Option\r\n            title={o.title}\r\n            \r\n            id={o.id}\r\n            qId={props.id}\r\n            questionId ={props.id}\r\n            optionTextChange={optionTextChangeHandler}\r\n            isCorrect={o.isCorrect}\r\n            ></Option>\r\n            </div>)\r\n    })}\r\n\r\n    <Button  variant=\"danger\" onClick={()=>{deleteQuestionHandler(props.id)}}> Delete Question </Button>\r\n    <Button variant=\"primary\" onClick={()=>{createOption(props.id)} } >Add Option</Button>\r\n\r\n   </div>)\r\n   \r\n\r\n}\r\n\r\nexport default Question","/home/reza/QuizAPI/client/src/component/QuizCard/quizcard.js",["96","97","98"],"import React,{useState,useEffect,useContext} from 'react' \r\nimport {Card,Button} from 'react-bootstrap'\r\nimport {Link} from 'react-router-dom'\r\nconst QuizCard = (props)=>{\r\n\r\n    \r\n    return(<div className=\"quizCard\" >\r\n\r\n\r\n<Card style={{ width: \"100%\" ,margin:\"3% 0%\" }}>\r\n \r\n  <Card.Body>\r\n    <Card.Title>{props.title}</Card.Title>\r\n    <Card.Text>\r\n      duration : {props.duration} min\r\n    </Card.Text>\r\n    <Button variant=\"primary\"  >\r\n\r\n        <Link to={`/takequiz/${props.quizId}`} style={{color:\"white\"}} > \r\n        Start\r\n        </Link>\r\n    </Button>\r\n  </Card.Body>\r\n</Card>\r\n    </div>)\r\n\r\n}\r\n\r\nexport default QuizCard","/home/reza/QuizAPI/client/src/component/Option/option.js",["99","100","101","102"],"import React ,{useState,useEffect,useContext,createRef} from 'react'\r\nimport {quizContext} from '../../contexts/quizContext'\r\nimport {Button,Form} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faTrash,faCheckCircle} from '@fortawesome/free-solid-svg-icons'\r\nimport './option.css'\r\nconst Option = (props)=>{\r\n\r\n   // const [correctButtonText,setCorrectButtonText] =useState(false)\r\n    \r\n    //console.log(\"from option\")\r\n    const {correctOptionChangeHandler,deleteOptionHandler} =useContext(quizContext)\r\n\r\n    \r\n\r\n   return(<div className=\"option-flex\" >\r\n\r\n\r\n       <div className=\"option-text\">\r\n       <Form.Group>\r\n        \r\n        <Form.Control  type=\"text\" placeholder=\"Option\" \r\n        value={props.title}\r\n        required={true}\r\n        style={{width:\"100%\"}}\r\n        onChange={(e)=>{props.optionTextChange(e, props.questionId, props.id)} }\r\n        />\r\n        </Form.Group>\r\n\r\n       </div>\r\n       \r\n       \r\n      <div className=\"optionButton\" > \r\n      <Button  variant=\"danger\"  type=\"button\" \r\n        onClick={()=>{deleteOptionHandler(props.questionId,props.id)}}> \r\n            <FontAwesomeIcon icon={faTrash} color=\"white\"/>\r\n        </Button>  \r\n      </div>\r\n       \r\n      <div>\r\n      <Button className=\"optionButton\" \r\n       variant = \"info\"\r\n       for={props.qId}\r\n       \r\n       >\r\n           \r\n          <input type=\"radio\" className=\"optionRadio\" name={props.qId} id={props.qId} onChange={\r\n\r\n            ()=>{\r\n              correctOptionChangeHandler(props.questionId, props.id)\r\n            }\r\n          } />\r\n           \r\n     </Button>\r\n\r\n      {/* <Button className=\"optionButton\" \r\n       variant ={props.isCorrect?\"success\":\"info\"}\r\n       onClick={()=>{\r\n           \r\n           correctOptionChangeHandler(props.questionId, props.id)\r\n           \r\n           }} >\r\n           \r\n           <FontAwesomeIcon icon={faCheckCircle} /> \r\n           \r\n     </Button> */}\r\n      </div>\r\n   </div>)\r\n}\r\n\r\nexport default Option",["103","104"],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":1,"column":18,"nodeType":"111","messageId":"112","endLine":1,"endColumn":27},{"ruleId":"109","severity":1,"message":"113","line":15,"column":12,"nodeType":"111","messageId":"112","endLine":15,"endColumn":17},{"ruleId":"109","severity":1,"message":"114","line":1,"column":26,"nodeType":"111","messageId":"112","endLine":1,"endColumn":34},{"ruleId":"109","severity":1,"message":"115","line":1,"column":35,"nodeType":"111","messageId":"112","endLine":1,"endColumn":44},{"ruleId":"109","severity":1,"message":"115","line":1,"column":25,"nodeType":"111","messageId":"112","endLine":1,"endColumn":34},{"ruleId":"109","severity":1,"message":"116","line":9,"column":10,"nodeType":"111","messageId":"112","endLine":9,"endColumn":32},{"ruleId":"109","severity":1,"message":"117","line":69,"column":17,"nodeType":"111","messageId":"112","endLine":69,"endColumn":20},{"ruleId":"109","severity":1,"message":"118","line":9,"column":31,"nodeType":"111","messageId":"112","endLine":9,"endColumn":42},{"ruleId":"109","severity":1,"message":"119","line":18,"column":12,"nodeType":"111","messageId":"112","endLine":18,"endColumn":22},{"ruleId":"109","severity":1,"message":"120","line":18,"column":23,"nodeType":"111","messageId":"112","endLine":18,"endColumn":36},{"ruleId":"109","severity":1,"message":"121","line":26,"column":9,"nodeType":"111","messageId":"112","endLine":26,"endColumn":29},{"ruleId":"122","severity":1,"message":"123","line":62,"column":7,"nodeType":"124","endLine":62,"endColumn":9,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":283,"column":51,"nodeType":"128","messageId":"129","endLine":283,"endColumn":53},{"ruleId":"109","severity":1,"message":"130","line":3,"column":14,"nodeType":"111","messageId":"112","endLine":3,"endColumn":25},{"ruleId":"109","severity":1,"message":"131","line":15,"column":12,"nodeType":"111","messageId":"112","endLine":15,"endColumn":20},{"ruleId":"109","severity":1,"message":"114","line":1,"column":16,"nodeType":"111","messageId":"112","endLine":1,"endColumn":24},{"ruleId":"109","severity":1,"message":"115","line":1,"column":25,"nodeType":"111","messageId":"112","endLine":1,"endColumn":34},{"ruleId":"109","severity":1,"message":"114","line":1,"column":15,"nodeType":"111","messageId":"112","endLine":1,"endColumn":23},{"ruleId":"109","severity":1,"message":"115","line":1,"column":24,"nodeType":"111","messageId":"112","endLine":1,"endColumn":33},{"ruleId":"109","severity":1,"message":"132","line":1,"column":34,"nodeType":"111","messageId":"112","endLine":1,"endColumn":44},{"ruleId":"109","severity":1,"message":"114","line":1,"column":16,"nodeType":"111","messageId":"112","endLine":1,"endColumn":24},{"ruleId":"109","severity":1,"message":"115","line":1,"column":25,"nodeType":"111","messageId":"112","endLine":1,"endColumn":34},{"ruleId":"109","severity":1,"message":"133","line":1,"column":46,"nodeType":"111","messageId":"112","endLine":1,"endColumn":55},{"ruleId":"109","severity":1,"message":"134","line":5,"column":17,"nodeType":"111","messageId":"112","endLine":5,"endColumn":30},{"ruleId":"105","replacedBy":"135"},{"ruleId":"107","replacedBy":"136"},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'token' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'faBatteryThreeQuarters' is defined but never used.","'res' is assigned a value but never used.","'buildStyles' is defined but never used.","'startAgain' is assigned a value but never used.","'setStartAgain' is assigned a value but never used.","'handleShowResultShow' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["139"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'FormControl' is defined but never used.","'loggedIn' is assigned a value but never used.","'useContext' is defined but never used.","'createRef' is defined but never used.","'faCheckCircle' is defined but never used.",["137"],["138"],"no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},"Update the dependencies array to be: [id]",{"range":"142","text":"143"},[1982,1984],"[id]"]